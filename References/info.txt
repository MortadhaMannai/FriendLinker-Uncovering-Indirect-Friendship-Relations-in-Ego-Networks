=====================================================
          LIST OF INSTALLED LIBRARIES
====================================================

1. SNAP for python -> generates a huge social circle graph
2. names 3.0 -> Python Package for generating the random names

====================================================
            IMPORTANT LINKS
====================================================
https://snap.stanford.edu/snappy/#download --> This link gives info about how to compile snap.py from source in different OS(es)

https://snap.stanford.edu/snappy/release/ --> To install Snap.py in your system (make sure you select correct file according to your OS)

https://snap.stanford.edu/snappy/doc/tutorial/tutorial.html --> A basic tutorial for Snap.py (make sure you read it well and fast)
                                                                **(An important section in the tutorial is from GRAPH CREATION ONWARDS)

====================================================
                METHODOLOGY
====================================================

Since the previous facebook dataset was very complex in terms of understanding, it is better to create our own dataset and work on that
The dataset since it is a social network interconnection we can understand the dataset in terms of an UNDIRECTED GRAPH.

Why an UNDIRECTED GRAPH ?
This is because in a social network interconnection structure we may have our contacts linking back towards us
like 0->1->2->3->0, they can form a circle and the connections can be in any possible way as the number of nodes and edges are large

Such type of Social Network graphs are also called EGO Networks where each node i.e the facebook member is termed as an EGO and all
his/her friends are termed as the ALTERS for the EGO, and each ALTER can have his own EGO network.

How is SNAP gonna help us ?
SNAP is gonna provide us functions to directly generate random undirected graphs for a specified number of nodes and edges.
It uses the internal subroutine of the snap library

GenRndGnm(<type of graph>, <number of nodes>, <number of edges>) -> info about this is given in the Tutorial link above

Using this function we will create a random undirected graph, now since we are dealing with an EGO network every node will be a person
and every person will have a name. This is where the names library comes into picture. Using a HASH MAP or a Python Dictionary we will
map every node Id to a random name which will be generated by the names library using the function := get_full_name()

Once this part is done,
Our initial dataset is setup, now as we are creating our own dataset and the names are being used for every node it will be a better option
to use an ADJACENCY LIST data structure in order to represent the graph. We can get the information for every node i.e to what all other nodes
the give node is connected. This is also given in the  Tutorial link which i sent.

Now once this dataset configuration is done we just have to implement the basic DLS on the dataset.


******* MAKE SURE WHILE READING THE TUTORIAL READ CAREFULLY ABOUT THE DIFFERENCE BETWEEN NODE ITERATOR AND NODE_ITERATOR.GetID()********                               
